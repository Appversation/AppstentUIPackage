// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target x86_64-apple-macos15.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AppstentUIMac
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AVFoundation
import AVKit
import Combine
import CoreData
import Foundation
import Observation
import Swift
import SwiftUI
import WebKit
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _WebKit_SwiftUI
import os
public struct AppstentDoc : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public var name: Swift.String
  public var lastModified: Foundation.Date?
  public var content: Swift.String
  public var isFolder: Swift.Bool
  public var children: [AppstentUIMac.AppstentDoc]?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(name: Swift.String, lastModified: Foundation.Date? = nil, isFolder: Swift.Bool = false)
  #endif
  public static func == (a: AppstentUIMac.AppstentDoc, b: AppstentUIMac.AppstentDoc) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ContentFormatUtil {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func color(from colorString: Swift.String) -> SwiftUICore.Color?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func alignment(from alignmentString: Swift.String) -> SwiftUICore.Alignment?
  #endif
  public static func verticalAlignment(from alignmentString: Swift.String) -> SwiftUICore.VerticalAlignment
  public static func horizontalAlignment(from alignmentString: Swift.String) -> SwiftUICore.HorizontalAlignment
  #if compiler(>=5.3) && $NonescapableTypes
  public static func unitPoint(from unitPointString: Swift.String) -> SwiftUICore.UnitPoint?
  #endif
  @objc deinit
}
@_Concurrency.MainActor public struct AppstentView : SwiftUICore.View {
  @_Concurrency.MainActor public static var customViewProvider: (any AppstentUIMac.CustomContentViewProvider)?
  @_Concurrency.MainActor public static var globalActionHandlerProvider: (any AppstentUIMac.GlobalActionHandlerProvider)?
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor public init(from viewContent: AppstentUIMac.ViewContent, dataProvider: (any AppstentUIMac.CustomContentDataProvider)? = nil, tapHandler: (any AppstentUIMac.ActionHandlerProvider)? = nil)
  #endif
  public typealias ViewBuilder = (AppstentUIMac.ViewContent, (any AppstentUIMac.CustomContentDataProvider)?) -> SwiftUICore.AnyView
  @_Concurrency.MainActor public static func registerViewType(_ type: Swift.String, builder: @escaping AppstentUIMac.AppstentView.ViewBuilder)
  public typealias Body = @_opaqueReturnTypeOf("$s13AppstentUIMac0A4ViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct ContentViewStyle : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: AppstentUIMac.ContentViewStyle.Content) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public init(from viewContent: AppstentUIMac.ViewContent)
  public typealias Body = @_opaqueReturnTypeOf("$s13AppstentUIMac16ContentViewStyleV4body7contentQr7SwiftUI01_d9Modifier_C0VyACG_tF", 0) __
}
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency internal func ignoreSafeAreas(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let ignoreSafeAreas:Bool = viewContent.ignoreSafeAreas
        
        if ignoreSafeAreas {
            return AnyView(self.ignoresSafeArea(.container, edges: [.all]))
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func shadow(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        guard let shadow:ViewContent = viewContent.shadow else {
            return AnyView(self)
        }
        
        let colorString:String = shadow.color
        let color = ContentFormatUtil.color(from: colorString) ?? .black
        
        if let radius:Float = shadow.radius {
                                    
            return AnyView(self.shadow(color: color, radius: CGFloat(radius), x: 0.0, y: 0.0))
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func blur(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        guard let blur:ViewContent = viewContent.blur else {
            return AnyView(self)
        }
        
        if let radius:Float = blur.radius {
            
            let opaque:Bool = blur.opaque
            
            return AnyView(self.blur(radius: CGFloat(radius), opaque: opaque))
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func backgroundColor(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let colorString:String = viewContent.backgroundColor
        
        if !colorString.isEmpty {
            
            if let color = ContentFormatUtil.color(from: colorString) {
                return AnyView(self.background(color))
            }
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func foregroundColor(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let colorString:String = viewContent.foregroundColor
        
        if !colorString.isEmpty {
            
            if let color = ContentFormatUtil.color(from: colorString) {
                return AnyView(self.foregroundColor(color).tint(color))
            }
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func font(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        var font: Font?
        let fontString:String = viewContent.font

        switch fontString {
        case "largeTitle":  font = Font.largeTitle
        case "title":       font = Font.title
        case "title2":      font = Font.title2
        case "title3":      font = Font.title3
        case "headline":    font = Font.headline
        case "subheadline": font = Font.subheadline
        case "body":        font = Font.body
        case "callout":     font = Font.callout
        case "footnote":    font = Font.footnote
        case "caption":     font = Font.caption
        case "caption2":    font = Font.caption2
        default:
            if let fontSize:Float = viewContent.fontSize {
                font = .custom(fontString, size: CGFloat(fontSize))
            }
        }
        
        if var font = font {
            
            let fontWeight:String = viewContent.fontWeight
            
            switch fontWeight {
            case "ultraLight":  font = font.weight(.ultraLight)
            case "thin":        font = font.weight(.thin)
            case "light":       font = font.weight(.light)
            case "regular":     font = font.weight(.regular)
            case "medium":      font = font.weight(.medium)
            case "semibold":    font = font.weight(.semibold)
            case "bold":        font = font.weight(.bold)
            case "heavy":       font = font.weight(.heavy)
            case "black":       font = font.weight(.black)
            default: break
            }
            
            return AnyView(self.font(font))
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func padding(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        if let paddingValue:Float = viewContent.padding {
            
            if paddingValue == 0 {
                return AnyView(self.padding())
            } else {
                return AnyView(self.padding(CGFloat(paddingValue)))
            }
        }
        
        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func offset(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let offsetX:Float = viewContent.offsetX ?? 0
        let offsetY:Float = viewContent.offsetY ?? 0
        
        return self.offset(x: CGFloat(offsetX), y: CGFloat(offsetY))
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func position(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let positionX:Float = viewContent.positionX ?? 0
        let positionY:Float = viewContent.positionY ?? 0
        
        return self.offset(x: CGFloat(positionX), y: CGFloat(positionY))
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func border(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let borderWidth:Float = (viewContent.borderWidth) ?? 1
        let colorString:String = viewContent.borderColor
        
        if !colorString.isEmpty,
           let color = ContentFormatUtil.color(from: colorString) {
            
            return AnyView(self.border(color, width: CGFloat(borderWidth)))
        }

        return AnyView(self)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func fixedSize(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let fixedWidth:Bool = viewContent.fixedWidth
        let fixedHeight:Bool = viewContent.fixedHeight
        
        return self.fixedSize(horizontal: fixedWidth, vertical: fixedHeight)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func frame(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let width:Float? = viewContent.width
        let height:Float? = viewContent.height
        
        let idealWidth:Float? = viewContent.idealWidth
        let idealHeight:Float? = viewContent.idealHeight
        
        let minWidth:Float? = viewContent.minWidth
        let maxWidth:Float? = viewContent.maxWidth
        let minHeight:Float? = viewContent.minHeight
        let maxHeight:Float? = viewContent.maxHeight
        
        let alignmentValue:String = viewContent.alignment
        let alignment:Alignment = ContentFormatUtil.alignment(from: alignmentValue) ?? .center
                
        return self.frame(minWidth: minWidth != nil ? CGFloat(minWidth!) : nil,
                                  idealWidth: idealWidth != nil ? CGFloat(idealWidth!) : nil,
                                  maxWidth: maxWidth != nil ? CGFloat(maxWidth!) : nil,
                                  minHeight: minHeight != nil ? CGFloat(minHeight!) : nil,
                                  idealHeight: idealHeight != nil ? CGFloat(idealHeight!) : nil,
                                  maxHeight: maxHeight != nil ? CGFloat(maxHeight!) : nil,
                                  alignment: alignment)
                        .frame(width: width != nil ? CGFloat(width!) : nil,
                               height: height != nil ? CGFloat(height!) : nil,
                               alignment: alignment)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func cornerRadius(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        guard let radius:Float = viewContent.cornerRadius else {
            return AnyView(self)
        }
        
        return AnyView(self.cornerRadius(CGFloat(radius)))
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func clip(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        
        let shapeName:String = viewContent.clipShape
        
        guard !shapeName.isEmpty else {
            return AnyView(self)
        }
        
        switch shapeName {
        case "circle":
            return AnyView(self.clipShape(Circle()))
        default:
            return AnyView(self)
        }
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency internal func transition(from viewContent: AppstentUIMac.ViewContent) -> some SwiftUICore.View {
        let transition:String = viewContent.transition
        
        switch transition {
        case "fadeIn":
            return AnyView(self.transition(.opacity))
        case "slide":
            return AnyView(self.transition(.slide))
        default:
            return AnyView(self)
        }
    }
  
}
extension SwiftUICore.Color {
  public static let backgroundColor: SwiftUICore.Color
  public static let secondaryBackgroundColor: SwiftUICore.Color
}
@_Concurrency.MainActor @preconcurrency public struct CustomTabView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(content: [(tabText: Swift.String, tabIcon: SwiftUICore.AnyView, view: SwiftUICore.AnyView)])
  @_Concurrency.MainActor @preconcurrency public var tabBar: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13AppstentUIMac13CustomTabViewV4bodyQrvp", 0) __
}
public protocol CustomContentDataProvider {
  func string(for fieldName: Swift.String) -> Swift.String
  func visibility(for fieldName: Swift.String) -> Swift.Bool
}
public enum LoadState {
  case notStarted, loading, success, failure
  public static func == (a: AppstentUIMac.LoadState, b: AppstentUIMac.LoadState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ActionHandlerProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  func tapHandler(with gestureData: [Swift.String : Swift.AnyObject]?) -> () -> Swift.Void
  #endif
}
public protocol GlobalActionHandlerProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  func tapHandler(for handlerName: Swift.String, with gestureData: [Swift.String : Swift.AnyObject]?) -> () -> Swift.Void
  #endif
}
@dynamicCallable @dynamicMemberLookup public class ViewContent : Swift.Hashable {
  public static func == (lhs: AppstentUIMac.ViewContent, rhs: AppstentUIMac.ViewContent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var isLoaded: Swift.Bool {
    get
    set
    _modify
  }
  public static var deploymentStage: Swift.String
  public static var apiKey: Swift.String
  public init(from dict: Swift.AnyObject)
  public var isLoadingFromRemote: Swift.Bool {
    get
    set
    _modify
  }
  public var cacheStatus: AppstentUIMac.ViewContent.CacheStatus {
    get
  }
  public enum CacheStatus {
    case none
    case cached
    case updating
    case upToDate
    case error(any Swift.Error)
  }
  @_Concurrency.MainActor public init(from contentId: Swift.String)
  public static func clearCache()
  public init(from data: Foundation.Data)
  public subscript(dynamicMember member: Swift.String) -> Swift.String {
    get
  }
  public subscript(dynamicMember member: Swift.String) -> [AppstentUIMac.ViewContent] {
    get
  }
  public subscript(dynamicMember member: Swift.String) -> [Swift.String] {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember member: Swift.String) -> AppstentUIMac.ViewContent? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember member: Swift.String) -> [Swift.String : Swift.AnyObject]? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember member: Swift.String) -> Swift.Int? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember member: Swift.String) -> Swift.Float? {
    get
  }
  #endif
  public subscript(dynamicMember member: Swift.String) -> Swift.Bool {
    get
  }
  public func dynamicallyCall(withKeywordArguments args: Swift.KeyValuePairs<Swift.String, Swift.AnyObject>)
  public static func update(content: Swift.String, with name: Swift.String, to subPath: Swift.String = "") async -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public static func getContent(with name: Swift.String, under subPath: Swift.String = "") async -> Foundation.Data?
  #endif
  public static func getAllViewContents(under subPath: Swift.String = "") async -> [AppstentUIMac.AppstentDoc]
  public static func deleteContent(with name: Swift.String, under subPath: Swift.String = "") async -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ViewContentCache {
  public static let shared: AppstentUIMac.ViewContentCache
  public func store(_ data: Foundation.Data, for key: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func retrieve(_ key: Swift.String) -> Foundation.Data?
  #endif
  public func clear()
  @objc deinit
}
extension AppstentUIMac.ViewContent : nonisolated Observation.Observable {
}
public protocol CustomContentViewProvider {
  func customView(from viewName: Swift.String) -> SwiftUICore.AnyView
  func visibility(from ruleName: Swift.String, ruleValue: Swift.String) -> Swift.Bool
}
extension AppstentUIMac.AppstentView : Swift.Sendable {}
extension AppstentUIMac.ContentViewStyle : Swift.Sendable {}
extension AppstentUIMac.CustomTabView : Swift.Sendable {}
extension AppstentUIMac.LoadState : Swift.Equatable {}
extension AppstentUIMac.LoadState : Swift.Hashable {}
